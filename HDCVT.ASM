;HD_CONVERTION

STACK1			SEGMENT PARA STACK
STACK_AREA		DW		100H DUP(?)
STACK_BOTTOM	EQU 	$-STACK_AREA
STACK1			ENDS

DATA1		SEGMENT PARA
MAXL		EQU		10
MEMNUM		DD		12345678H
INDEX		DW		?
X			DW		?
Y			DW		?
RESULT		DD		?
TEMP		DW		?
BUFFS		DB		MAXL DUP(?)
LENBS		DW		?
BUFFD		DB		MAXL DUP(?)
LENBD		DW		?
RESDISP		DB		MAXL DUP(?)
NEW_LINE	DB		0DH,0AH,'$'
JMP_TABLE	DW		OP1,OP2,OP3,OP4,OP5
DATA1		ENDS

CODE1		SEGMENT	PARA
			ASSUME	CS:CODE1, DS:DATA1, SS:STACK1

MAIN		PROC	FAR
			MOV		AX,		STACK1
			MOV		SS,		AX
			MOV		SP,		STACK_BOTTOM
			MOV		AX,		DATA1
			MOV		DS,		AX
			MOV		ES,		AX

START:		MOV		DX,		OFFSET NEW_LINE
			MOV		AH,		9
			INT 	21H

			MOV		AX,		OFFSET TEMP
			PUSH	AX
			MOV		AX,		OFFSET BUFFS
			PUSH	AX
			CALL	INPUTNUM
			CALL	GETNUM
			POP		DI
			MOV		AX,		[DI]
			CMP		AX,		5
			JA 		EXIT
			CMP		AX,		1
			JB 		EXIT
			DEC		AX
			SHL		AX,		1
			MOV		BX,		OFFSET JMP_TABLE
			ADD		BX,		AX
			JMP 	[BX]

OP1:		MOV		AX,		OFFSET BUFFD
			PUSH	AX
			MOV		AX,		OFFSET BUFFS
			PUSH	AX
			CALL	INPUTNUM
			CALL	DTOH
			JMP 	START

OP2:		MOV		AX,		OFFSET BUFFD
			PUSH	AX
			MOV		AX,		OFFSET BUFFS
			PUSH	AX
			CALL	INPUTNUM
			CALL	HTOD
			JMP 	START

OP3:		MOV		AX,		OFFSET BUFFD
			PUSH	AX			
			MOV		AX,		OFFSET MEMNUM
			PUSH	AX
			CALL	MTOH
			JMP 	START

OP4:		CALL	MUL2
			JMP 	START

OP5:		CALL	DIV2
			JMP 	START

EXIT:		MOV		AX,		4C00H
			INT		21H
MAIN		ENDP

MTOH		PROC
			PUSH	BP
			MOV		BP,		SP
			MOV		SI,		[BP+4]
			MOV		DI,		[BP+6]
			MOV		CX,		2
			ADD		DI,		7
			MOV		[DI+1],	24H
CONVERT:	PUSH	CX
			MOV		AX,		[SI]
			MOV		CX,		4
			MOV		BX,		16
CVT1:		XOR		DX,		DX
			DIV		BX
			CMP		DX,		9
			JBE		CVT2
			ADD		DX,		7H
CVT2:		ADD		DL,		30H
			MOV		[DI],	DL
			DEC		DI
			LOOP	CVT1
			INC		SI
			INC		SI
			POP		CX
			LOOP	CONVERT
PRINTMH:	MOV		DX,		[BP+6]
			MOV		AH,		9
			INT		21H
			POP		BP
			RET 	4
MTOH		ENDP

HTOD		PROC
			PUSH	BP
			MOV		BP,		SP
			MOV		SI,		[BP+4]
			MOV		DI,		[BP+6]
			MOV		AX,		OFFSET TEMP
			PUSH	AX
			PUSH	SI
			CALL	GETHEX
			POP		BX
			MOV		AX,		[BX]
			MOV		BX,		10
			MOV		CX,		5
			ADD		DI,		4
			MOV		[DI+1],	24H
CONVD:		XOR		DX,		DX
			DIV		BX
			OR		DL,		30H
			MOV		[DI],	DL
			DEC		DI
			LOOP	CONVD
PRINTD:		MOV		DX,		[BP+6]
			MOV		AH,		9
			INT 	21H
			POP		BP
			RET 	4
HTOD		ENDP

DTOH		PROC
			PUSH	BP
			MOV		BP,		SP
			MOV		SI,		[BP+4]
			MOV		DI,		[BP+6]
			MOV		AX,		OFFSET TEMP
			PUSH	AX
			PUSH	SI
			CALL	GETNUM
			POP		BX
			MOV		AX,		[BX]
			MOV		BX,		16
			MOV		CX,		4
			ADD		DI,		3
			MOV		[DI+1],	24H
CONVH:		XOR		DX,		DX
			DIV		BX
			CMP		DX,		9
			JBE		NATOZ
			ADD		DL,		7H	
NATOZ:		ADD		DL,		30H
			MOV		[DI],	DL
			DEC		DI
			LOOP	CONVH
PRINTH:		MOV		DX,		[BP+6]
			MOV		AH,		9
			INT 	21H
			POP		BP
			RET 	4
DTOH		ENDP

INPUTNUM	PROC
			PUSH	BP
			MOV		BP,			SP
			MOV		DI,			[BP+4]
			XOR		CX,			CX
INPUTX:		MOV		AH,			1
			INT		21H
			CMP		AL,			0DH
			JZ		ENDINPUT
			MOV		[DI],		AL
			INC		CX
			INC		DI
			JMP		INPUTX
ENDINPUT:	MOV		AL,			24H
			MOV		[DI],		AL
			MOV		DI,			[BP+4]	
			MOV		[DI+MAXL],	CX
			POP		BP
			RET
INPUTNUM	ENDP

GETNUM		PROC
			PUSH	BP
			MOV		BP,		SP
			PUSH	SI
			PUSH	DI
			MOV		SI,		[BP+4]
			MOV		DI,		[BP+6]
			XOR		DX,		DX
			XOR		AX,		AX
			MOV		BX,		10
			MOV		CX,		[SI+MAXL]
GETDV:		MUL		BX
			MOV		DL,		[SI]
			ADD		AX,		DX
			SUB		AX,		30H
			INC		SI
			LOOP	GETDV
			MOV		[DI],	AX
			POP		DI
			POP		SI
			POP		BP
			RET 	2
GETNUM		ENDP

GETHEX		PROC
			PUSH	BP
			MOV		BP,		SP
			PUSH	SI
			PUSH	DI
			MOV		SI,		[BP+4]
			MOV		DI,		[BP+6]
			XOR		DX,		DX
			XOR		AX,		AX
			MOV		BX,		16
			MOV		CX,		[SI+MAXL]
GETHV:		MUL		BX
			MOV		DL,		[SI]
			CMP		DL,		41H
			JB		NEXTD
			CMP		DL,		61H
			JB 		NEXTHC
			SUB		DL,		20H
NEXTHC:		SUB		DL,		7H
NEXTD:		ADD		AX,		DX
			SUB		AX,		30H
			INC		SI
			LOOP	GETHV
			MOV		[DI],	AX
			POP		DI
			POP		SI
			POP		BP
			RET 	2
GETHEX		ENDP

DIV2		PROC
			CALL	GET2NUM
			XOR		DX,		DX
			MOV		AX,		X
			MOV		BX,		Y
			DIV 	BX
			PUSH	DX
QUOTIENT:	MOV		DI,		OFFSET RESDISP
			PUSH	DI
			MOV		SI,		OFFSET RESULT
			PUSH	SI
			MOV		[SI],	AX
			INC		SI
			INC		SI
			MOV		[SI],	0
			CALL	MTOH
NEWLINE:	MOV		DX,		OFFSET	NEW_LINE
			MOV		AH,		9
			INT 	21H
REMAINDER:	POP		DX
			MOV		DI,		OFFSET RESDISP
			PUSH	DI
			MOV		SI,		OFFSET RESULT
			PUSH	SI
			MOV		[SI],	DX
			INC		SI
			INC		SI
			MOV		[SI],	0
			CALL	MTOH
			RET
DIV2		ENDP

GET2NUM		PROC
			MOV		AX,		OFFSET	X
			PUSH	AX
			MOV		AX,		OFFSET BUFFS
			PUSH	AX
			CALL	INPUTNUM
			CALL	GETNUM
			POP		BX
			MOV		AX,		OFFSET Y
			PUSH	AX
			MOV		AX,		OFFSET BUFFS
			PUSH	AX
			CALL	INPUTNUM
			CALL	GETNUM
			POP		BX
			RET
GET2NUM		ENDP

MUL2		PROC
			CALL	GET2NUM
			XOR		DX,		DX
			MOV		AX,		X
			MUL 	Y
			MOV		DI,		OFFSET RESDISP
			PUSH	DI
			MOV		SI,		OFFSET RESULT
			PUSH	SI
			MOV		[SI],	AX
			INC		SI
			INC		SI
			MOV		[SI],	DX
			CALL	MTOH
			RET
MUL2		ENDP

CODE1		ENDS
			END		MAIN