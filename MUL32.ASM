;MUL32
;DX:AX:CX:BX

STACK1			SEGMENT PARA STACK
STACK_AREA		DW	100H DUP(?)
STACK_BOTTOM	EQU	$-STACK_AREA
STACK1			ENDS

DATA1	SEGMENT PARA
RESULTH	DB	16 DUP(?),'$'
X		DD	0FFFFFFH
Y		DD	0FFFFFFH
BUFFERH	DW	?
BUFFERL	DW	?
RESULTD	DB	20 DUP(?),'$'
NEWLINE	DB	0DH,0AH,'$'
DATA1	ENDS

CODE1	SEGMENT	PARA
		ASSUME	CS:CODE1,DS:DATA1,SS:STACK1
MAIN	PROC	FAR
		MOV		AX,	STACK1
		MOV		SS,	AX
		MOV		SP,	STACK_BOTTOM
		MOV		AX,	DATA1
		MOV		DS,	AX

PART1:	MOV		AX,	WORD PTR X
		MOV		BX,	WORD PTR Y
		MUL		BX
		PUSH	DX
		PUSH	AX

P2_1:	MOV		AX,	WORD PTR X
		MOV		BX,	WORD PTR Y+2
		MUL		BX
		PUSH	DX
		PUSH	AX

P2_2:	MOV		AX,	WORD PTR X+2
		MOV		BX,	WORD PTR Y
		MUL		BX

PART2:	POP		BX
		POP		CX
		ADD		AX,	BX
		ADC		DX,	CX
		PUSH	DX
		PUSH	AX

PART3:	MOV		AX,	WORD PTR X+2
		MOV		BX,	WORD PTR Y+2
		MUL		BX
		ADC		DX,	0

		POP		BUFFERL
		POP		BUFFERH
		POP		BX
		POP		CX
		ADD		CX,	BUFFERL
		ADC		AX,	BUFFERH
		ADC		DX,	0

		PUSH	DX
		PUSH	AX
		PUSH	CX
		PUSH	BX

		MOV		CX,	4
		MOV		DI,	OFFSET RESULTH+15

CHH1:	POP		AX
		PUSH	CX
		MOV		CX,	4
		MOV		BX,	16

CHH1_1:	XOR		DX,	DX
		DIV		BX
		CMP		DX,	9
		JBE		NATOZ
		ADD		DX,	7H
		
NATOZ:	ADD		DL,	30H

		MOV		[DI],	DL
		DEC		DI
		LOOP	CHH1_1

		POP		CX
		LOOP	CHH1

PRINTH:	MOV		DX,	OFFSET RESULTH
		MOV		AH,	9
		INT		21H
		
		MOV		DX,	OFFSET NEWLINE
		MOV		AH,	9
		INT		21H

EXIT:	MOV		AX,	4C00H
		INT		21H
MAIN	ENDP

CODE1	ENDS
		END		MAIN