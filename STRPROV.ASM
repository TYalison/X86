;STRPRO_VLEN

STACK1			SEGMENT PARA STACK
STACK_AREA		DW		100H DUP(?)
STACK_BOTTOM	EQU 	$-STACK_AREA
STACK1			ENDS

DATA1		SEGMENT PARA
MAXNUM		EQU		200
LOC			DW		?
LEN1		DW		?
LEN2		DW		?
LENBUFF		DW		?
STR1		DB		MAXNUM DUP(?)
STR2		DB		MAXNUM DUP(?)
BUFFER		DB		MAXNUM DUP(?)
LOCSTR		DB		'NFD','$'
NEW_LINE	DB		0DH,0AH,'$'
OPERATOR	DB		' = ','$'
			DB		' > ','$'
			DB		' < ','$'
DATA1		ENDS

CODE1		SEGMENT	PARA
			ASSUME	CS:CODE1, DS:DATA1, SS:STACK1

MAIN		PROC	FAR
			MOV		AX,		STACK1
			MOV		SS,		AX
			MOV		SP,		STACK_BOTTOM
			MOV		AX,		DATA1
			MOV		DS,		AX
			MOV		ES,		AX

INPUT:		;MOV	DI,	OFFSET ...
			;CALL	INPUTSTR
			;MOV	LEN...,	AX
			
COPY:		;MOV	SI,	OFFSET STR1
			;MOV	DI,	OFFSET STR2
			;CALL	STRCPY

COMPARE:	;INPUT  STR1->[SI]
			;INPUT  STR2->[DI]
			;CALL	STRCMP
			;CALL	PRINTCMP

SEARCH:		;INPUT  STR1->[SI]
			;INPUT  BUFFER->[DI]
			;CALL	STRFND
			;CALL	PRINTFND

DELECT:		;INPUT  STR1->[SI]
			;INPUT  BUFFER->[DI]
			;CALL	STRDEL
			;MOV	LOC,	AX

INSERT:		;INPUT  BUFFER->[SI]
			;INPUT  STR1->[DI]
			;CALL	INPUTLOC-S>TR2
			;CALL	STRFND

EXIT:		MOV		AX,	4C00H
			INT		21H
MAIN		ENDP

INPUTSTR	PROC
			XOR		CX,		CX
INPUTX:		MOV		AH,		1
			INT		21H
			CMP		AL,		0DH
			JZ		NEWLINE
			MOV		[DI],	AL
			INC		CX
			INC		DI
			JMP		INPUTX
NEWLINE:	MOV		AL,		24H
			MOV		[DI],	AL
			MOV		AX,		CX
			RET
INPUTSTR	ENDP

STRCPY		PROC
			PUSH	DI
			MOV		DX,		SI
			MOV		AH,		9
			INT 	21H
			CLD
CPYLP:		LODSB
			STOSB
			CMP		AL,		24H
			JNZ		CPYLP
			MOV		[DI],	AL
			MOV		DX,		OFFSET NEW_LINE
			MOV		AH,		9
			INT 	21H
			POP		DX
			MOV		AH,		9
			INT 	21H
			RET
STRCPY		ENDP

STRCMP		PROC
			MOV		SI,		OFFSET STR1
			MOV		DI,		OFFSET STR2
			CLD
			MOV		CX,		LEN1
			CMP		CX,		LEN2
			JNB		CONTINUE
			MOV		CX,		LEN2
CONTINUE:	REPZ	CMPSB
			JA		ABOVE
			JB		BELOW
			MOV		CX,		LEN1
			CMP		CX,		LEN2
			JA		ABOVE
			JB		BELOW
			MOV		AX,		0
			JMP		CMPRET
ABOVE:		MOV		AX,		1
			JMP		CMPRET
BELOW:		MOV		AX,		0FFFFH
CMPRET:		RET
STRCMP		ENDP

PRINTCMP	PROC
			PUSH	AX
			MOV		DX,		OFFSET STR1
			MOV		AH,		9
			INT		21H
			POP		AX
			CMP 	AX,		0FFFFH
			JZ		LESS
			CMP 	AX,		0
			JA		GREATER
			MOV		DX,		OFFSET OPERATOR
			JMP		OPPO
GREATER:	MOV		DX,		OFFSET OPERATOR+4
			JMP		OPPO
LESS:		MOV		DX,		OFFSET OPERATOR+8
OPPO:		MOV		AH,		9
			INT		21H
			MOV		DX,		OFFSET STR2
			MOV		AH,		9
			INT		21H
			RET
PRINTCMP	ENDP

STRFND		PROC
			MOV		SI,		OFFSET STR1
			MOV		DI,		OFFSET BUFFER
			MOV		DX,		0
			MOV		AX,		LEN1
FNDLP:		PUSH	SI
			PUSH	DI
			CMP		AX,		LENBUFF
			JB		FNDRET
			MOV		CX,		LENBUFF
			CLD
			REPZ	CMPSB
			JZ		FNDRET
			INC		DX
			POP		DI
			POP		SI
			DEC		AX
			INC		SI
			JMP		FNDLP
FNDRET:		POP		DI
			POP		SI
			MOV		AX,		DX
			MOV		LOC,	AX
			RET
STRFND		ENDP

PRINTFND	PROC
			MOV		AX,		LOC
			INC		AX
			CMP 	AX,		LEN1
			JZ		LOCRET
			DEC		AX
			MOV		DI,		OFFSET LOCSTR+2
			MOV		CX,		3
			MOV		BX,		10
LOCLP:		XOR		DX,		DX
			DIV		BX
			OR 		DL,		30H
			MOV		[DI],	DL
			DEC		DI
			LOOP	LOCLP
LOCRET:		MOV		DX,		OFFSET LOCSTR
			MOV		AH,		9
			INT		21H
			RET
PRINTFND	ENDP

STRDEL		PROC
			MOV		SI,		OFFSET STR1
			MOV		DI,		OFFSET BUFFER
			PUSH	SI
			CALL	STRFND
			INC		AX
			CMP		AX,		LEN1
			JZ		DELRET
			DEC		AX
			POP		SI
			ADD		SI,		AX
			MOV		DI,		SI
			ADD		DI,		LENBUFF
DELLP:		MOV		DL,		BYTE PTR [DI]
			MOV		[SI],	DL
			CMP		DL,		24H
			JZ		DELRET
			INC		SI
			INC		DI
			JMP		DELLP
DELRET:		MOV		DX,		OFFSET STR1
			MOV		AH,		9
			INT		21H
			RET
STRDEL		ENDP

INPUTLOC	PROC
			MOV		LOC,	0FFFFH
			MOV		DI,		OFFSET	STR2
			CALL	INPUTSTR
			MOV		CX,		AX
			CMP		AX,		3
			JA		LOCEND
			MOV		SI,		OFFSET	STR2
			XOR		AX,		AX
			MOV		BX,		10
GETLOC:		MUL		BX
			XOR		DX,		DX
			MOV		DL,		BYTE PTR [SI]
			SUB		DL,		30H
			ADD		AX,		DX
			LOOP	GETLOC
			MOV		LOC,	AX
LOCEND:		RET
INPUTLOC	ENDP

STRIST		PROC
			MOV		SI,		OFFSET BUFFER
			MOV		DI,		OFFSET STR1
			MOV		AX,		0FFFFH
			MOV		DX,		LEN1
			CMP		DX,		LOC
			JB		ISTRET
			MOV		AX,		LOC
			ADD		DI,		AX
			PUSH	SI
			PUSH	DI
			ADD		SI,		LENBUFF
ISTLP:		MOV		DL,		BYTE PTR [DI]
			MOV		[SI],	DL
			CMP		DL,		24H
			JZ		IST
			INC		DI
			INC		SI
			JMP		ISTLP
IST:		POP		DI
			POP		SI
ISTNEXT:	MOV		DL,		BYTE PTR [SI]
			MOV		[DI],	DL
			CMP		DL,		24H
			JZ		ISTRET
			INC		SI
			INC		DI
			JMP		ISTNEXT
ISTRET:		MOV		DX,		OFFSET STR1
			MOV		AH,		9
			INT		21H
			RET
STRIST		ENDP

CODE1		ENDS
			END		MAIN