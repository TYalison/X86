;STRPRO_VLEN

STACK1			SEGMENT PARA STACK
STACK_AREA		DW		100H DUP(?)
STACK_BOTTOM	EQU 	$-STACK_AREA
STACK1			ENDS

DATA1		SEGMENT PARA
MAXN		EQU		200
TEMP		DW		?
INDEX		DW		?
LOC			DW		?
STR1		DB		MAXN DUP(?)
LEN1		DW		?
STR2		DB		MAXN DUP(?)
LEN2		DW		?
BUFFER		DB		MAXN DUP(?)
LENBUFF		DW		?
LOCSTR		DB		'NFD','$'
NEW_LINE	DB		0DH,0AH,'$'
CMP_RES		DW		?
OPERATOR	DB		' = ','$'
			DB		' > ','$'
			DB		' < ','$'
JMP_TABLE	DW		OP1,OP2,OP3,OP4,OP5
DATA1		ENDS

CODE1		SEGMENT	PARA
			ASSUME	CS:CODE1, DS:DATA1, SS:STACK1

MAIN		PROC	FAR
			MOV		AX,		STACK1
			MOV		SS,		AX
			MOV		SP,		STACK_BOTTOM
			MOV		AX,		DATA1
			MOV		DS,		AX
			MOV		ES,		AX

START:		MOV		DX,		OFFSET NEW_LINE
			MOV		AH,		9
			INT 	21H

			MOV		AX,		OFFSET TEMP
			PUSH	AX
			MOV		AX,		OFFSET BUFFER
			PUSH	AX
			CALL	INPUTSTR
			CALL	GETNUM
			POP		DI
			MOV		AX,		[DI]
			CMP		AX,		5
			JA 		EXIT
			CMP		AX,		1
			JB 		EXIT
			DEC		AX
			SHL		AX,		1
			MOV		BX,		OFFSET JMP_TABLE
			ADD		BX,		AX
			JMP 	[BX]

OP1:		MOV		AX,		OFFSET STR1
			PUSH	AX
			CALL	INPUTSTR
			MOV		AX,		OFFSET STR2
			PUSH	AX
			CALL	STRCPY
			JMP 	START

OP2:		MOV		AX,		OFFSET CMP_RES
			PUSH	AX
			MOV		AX,		OFFSET STR1
			PUSH	AX
			CALL	INPUTSTR
			MOV		AX,		OFFSET STR2
			PUSH	AX
			CALL	INPUTSTR
			CALL	STRCMP
			CALL	PRINTCMP
			JMP 	START

OP3:		MOV		AX,		OFFSET STR1
			PUSH	AX
			CALL	INPUTSTR
			MOV		AX,		OFFSET BUFFER
			PUSH	AX
			CALL	INPUTSTR
			MOV		AX,		OFFSET LOC
			PUSH	AX
			CALL	STRFND
			CALL	PRINTFND
			JMP 	START

OP4:		MOV		AX,		OFFSET STR1
			PUSH	AX
			CALL	INPUTSTR
			MOV		AX,		OFFSET BUFFER
			PUSH	AX
			CALL	INPUTSTR
			CALL	STRDEL
			JMP 	START

OP5:		MOV		AX,		OFFSET STR1
			PUSH	AX
			CALL	INPUTSTR
			MOV		AX,		OFFSET STR2
			PUSH	AX
			CALL	INPUTSTR
			CALL	INPUTLOC
			CALL	STRIST
			JMP 	START

EXIT:		MOV		AX,	4C00H
			INT		21H

MAIN		ENDP

INPUTSTR	PROC
			PUSH	BP
			MOV		BP,			SP
			MOV		DI,			[BP+4]
			XOR		CX,			CX
INPUTX:		MOV		AH,			1
			INT		21H
			CMP		AL,			0DH
			JZ		NEWLINE
			MOV		[DI],		AL
			INC		CX
			INC		DI
			JMP		INPUTX
NEWLINE:	MOV		AL,			24H
			MOV		[DI],		AL
			MOV		DI,			[BP+4]	
			MOV		[DI+MAXN],	CX
			POP		BP
			RET
INPUTSTR	ENDP

GETNUM		PROC
			PUSH	BP
			MOV		BP,		SP
			PUSH	SI
			PUSH	DI
			MOV		SI,		[BP+4]
			MOV		DI,		[BP+6]
			XOR		DX,		DX
			XOR		AX,		AX
			MOV		BX,		10
			MOV		CX,		[SI+MAXN]
GETDV:		MUL		BX
			MOV		DL,		[SI]
			ADD		AX,		DX
			SUB		AX,		30H
			INC		SI
			LOOP	GETDV
			MOV		[DI],	AX
			POP		DI
			POP		SI
			POP		BP
			RET 	2
GETNUM		ENDP

STRCPY		PROC
			PUSH	BP
			MOV		BP,		SP
			MOV		DI,		[BP+4]
			MOV		SI,		[BP+6]
			CLD
CPYLP:		LODSB
			STOSB
			CMP		AL,		24H
			JNZ		CPYLP
			MOV		[DI],	AL
			MOV		DX,		[BP+4]
			MOV		AH,		9
			INT 	21H
			POP		BP
			RET		4
STRCPY		ENDP

STRCMP		PROC
			PUSH	BP
			MOV		BP,		SP
			MOV		DI,		[BP+4]
			MOV		SI,		[BP+6]
			CLD
			MOV		BX,		[SI+MAXN]
			MOV		DX,		[DI+MAXN]
			MOV		CX,		BX
			CMP		CX,		DX
			JB		CONTINUE
			MOV		CX,		DX
CONTINUE:	REPZ	CMPSB
			JA		ABOVE
			JB		BELOW
			CMP		BX,		DX
			JA		ABOVE
			JB		BELOW
			MOV		AX,		0
			JMP		CMPRET
ABOVE:		MOV		AX,		1
			JMP		CMPRET
BELOW:		MOV		AX,		0FFFFH
CMPRET:		MOV		DI,		[BP+8]
			MOV		[DI],	AX
			POP		BP
			RET
STRCMP		ENDP

PRINTCMP	PROC
			PUSH	BP
			MOV		BP,		SP
			MOV		DX,		[BP+6]
			MOV		AH,		9
			INT		21H
			MOV		DI,		[BP+8]
			MOV		AX,		[DI]
			CMP 	AX,		0FFFFH
			JZ		LESS
			CMP 	AX,		0
			JA		GREATER
			MOV		DX,		OFFSET OPERATOR
			JMP		OPPO
GREATER:	MOV		DX,		OFFSET OPERATOR+4
			JMP		OPPO
LESS:		MOV		DX,		OFFSET OPERATOR+8
OPPO:		MOV		AH,		9
			INT		21H
			MOV		DX,		[BP+4]
			MOV		AH,		9
			INT		21H
			POP		BP
			RET		6
PRINTCMP	ENDP

STRFND		PROC
			PUSH	BP
			MOV		BP,		SP
			MOV		DI,		[BP+6]
			MOV		SI,		[BP+8]
			MOV		DX,		0
			MOV		AX,		[SI+MAXN]
			MOV		BX,		[DI+MAXN]
FNDLP:		PUSH	SI
			PUSH	DI
			CMP		AX,		BX
			JB		FNDRET1
			MOV		CX,		BX
			CLD
			REPZ	CMPSB
			JZ		FNDRET2
			INC		DX
			POP		DI
			POP		SI
			DEC		AX
			INC		SI
			JMP		FNDLP
FNDRET1:	MOV		SI,		[BP+8]
			MOV		DX,		[SI+MAXN]
			DEC 	DX	
FNDRET2:	POP		DI
			POP		SI
			MOV		DI,		[BP+4]
			MOV		[DI],	DX
			POP		BP
			RET		4
STRFND		ENDP

PRINTFND	PROC
			PUSH	BP
			MOV		BP,		SP
			MOV		SI,		[BP+4]
			MOV		AX,		LOC
			INC		AX
			CMP 	AX,		[SI+MAXN]
			JZ		LOCRET
			DEC		AX
			MOV		DI,		OFFSET LOCSTR+2
			MOV		CX,		3
			MOV		BX,		10
LOCLP:		XOR		DX,		DX
			DIV		BX
			OR 		DL,		30H
			MOV		[DI],	DL
			DEC		DI
			LOOP	LOCLP
LOCRET:		MOV		DX,		OFFSET LOCSTR
			MOV		AH,		9
			INT		21H
			POP		BP
			RET		2
PRINTFND	ENDP

STRDEL		PROC
			PUSH	BP
			MOV		BP,		SP
			MOV		DI,		[BP+4]
			MOV		SI,		[BP+6]
			PUSH	DI
			PUSH	SI
			PUSH	DI
			MOV		AX,		OFFSET LOC
			PUSH	AX	
			CALL	STRFND
			POP		SI
			POP		DI
			MOV		AX,		LOC
			INC		AX
			CMP		AX,		WORD PTR [SI+MAXN]
			JZ		DELRET
			DEC		AX
			ADD		SI,		AX
			MOV		DI,		WORD PTR [DI+MAXN]
			ADD		DI,		SI
DELLP:		MOV		DL,		BYTE PTR [DI]
			MOV		[SI],	DL
			CMP		DL,		24H
			JZ		DELRET
			INC		SI
			INC		DI
			JMP		DELLP
DELRET:		MOV		DX,		OFFSET STR1
			MOV		AH,		9
			INT		21H
			POP		BP
			RET		4
STRDEL		ENDP

INPUTLOC	PROC
			MOV		LOC,	0FFFFH
			MOV		DI,		OFFSET	BUFFER
			PUSH	DI
			CALL	INPUTSTR
			MOV		CX,		LENBUFF
			CMP		CX,		3
			JA		LOCEND
			CMP		CX,		0
			JZ 		LOCEND
			POP		SI
			XOR		AX,		AX
			MOV		BX,		10
GETLOC:		MUL		BX
			XOR		DX,		DX
			MOV		DL,		BYTE PTR [SI]
			SUB		DL,		30H
			ADD		AX,		DX
			INC 	SI
			LOOP	GETLOC
			MOV		LOC,	AX
LOCEND:		RET
INPUTLOC	ENDP

STRIST		PROC
			PUSH	BP
			MOV		BP,		SP
			MOV		SI,		[BP+4]
			MOV		DI,		[BP+6]
			MOV		AX,		0FFFFH
			MOV		DX,		[DI+MAXN]
			CMP		DX,		LOC
			JB		ISTRET
			ADD		DI,		LOC
			PUSH	SI
			PUSH	DI
			ADD		SI,		[SI+MAXN]
ISTLP:		MOV		DL,		BYTE PTR [DI]
			MOV		[SI],	DL
			CMP		DL,		24H
			JZ		IST
			INC		DI
			INC		SI
			JMP		ISTLP
IST:		POP		DI
			POP		SI
ISTNEXT:	MOV		DL,		BYTE PTR [SI]
			MOV		[DI],	DL
			CMP		DL,		24H
			JZ		ISTRET
			INC		SI
			INC		DI
			JMP		ISTNEXT
ISTRET:		MOV		DX,		[BP+6]
			MOV		AH,		9
			INT		21H
			POP		BP
			RET		4
STRIST		ENDP

CODE1		ENDS
			END		MAIN