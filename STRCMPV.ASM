;COMPARE_VLEN

STACK1			SEGMENT PARA STACK
STACK_AREA		DW		100H DUP(?)
STACK_BOTTOM	EQU 	$-STACK_AREA
STACK1			ENDS

DATA1		SEGMENT PARA
MAXNUM		EQU		200
LEN1		DW		?
LEN2		DW		?
STR1		DB		27H,MAXNUM DUP(?)
STR2		DB		27H,MAXNUM DUP(?)
OPERATOR	DB		' = ','$'
			DB		' > ','$'
			DB		' < ','$'
DATA1		ENDS

CODE1		SEGMENT	PARA
			ASSUME	CS:CODE1, DS:DATA1, SS:STACK1

MAIN		PROC	FAR
			MOV		AX,		STACK1
			MOV		SS,		AX
			MOV		SP,		STACK_BOTTOM
			MOV		AX,		DATA1
			MOV		DS,		AX

			XOR		CX,		CX
			MOV		DI,		OFFSET STR1+1
INPUT1:		MOV		AH,		1
			INT		21H
			CMP		AL,		0DH
			JZ		NEWLINE1
			MOV		[DI],	AL
			INC		CX
			INC		DI
			JMP		INPUT1
NEWLINE1:	MOV		LEN1,	CX
			MOV		[DI],	27H
			MOV		AL,		24H
			MOV		[DI+1],	AL

			XOR		CX,		CX
			MOV		DI,		OFFSET STR2+1
INPUT2:		MOV		AH,		1
			INT		21H
			CMP		AL,		0DH
			JZ		NEWLINE2
			MOV		[DI],	AL
			INC		CX
			INC		DI
			JMP		INPUT2
NEWLINE2:	MOV		LEN2,	CX
			MOV		[DI],	27H
			MOV		AL,		24H
			MOV		[DI+1],	AL

			MOV		DX,		OFFSET STR1
			MOV		AH,		9
			INT		21H
			CALL	STRCMP
			MOV		DX,		OFFSET STR2
			MOV		AH,		9
			INT		21H

			MOV		AX,		4C00H
			INT		21H
MAIN		ENDP

STRCMP		PROC
			PUSH	ES
			PUSH	DS
			POP		ES

			MOV		SI,		OFFSET STR1
			MOV		DI,		OFFSET STR2
			CLD
			MOV		CX,		LEN1
			CMP		CX,		LEN2
			JNB		CONTINUE
			MOV		CX,		LEN2
CONTINUE:	REPZ	CMPSB
			JA		ABOVE
			JB		BELOW
			MOV		CX,		LEN1
			CMP		CX,		LEN2
			JA		ABOVE
			JB		BELOW

			MOV		DX,		OFFSET OPERATOR
			JMP		PRINTOP
ABOVE:		MOV		DX,		OFFSET OPERATOR+4
			JMP		PRINTOP
BELOW:		MOV		DX,		OFFSET OPERATOR+8
PRINTOP:	MOV		AH,		9
			INT		21H	

			POP		ES
			RET
STRCMP		ENDP

CODE1		ENDS
			END		MAIN