;STRCMP

STACK1			SEGMENT PARA STACK
STACK_AREA		DW		100H DUP(?)
STACK_BOTTOM	EQU 	$-STACK_AREA
STACK1			ENDS

DATA1		SEGMENT PARA
STR_LEN		EQU		3
STR1		DB		27H,STR_LEN DUP(?),27H,'$'
STR2		DB		27H,STR_LEN DUP(?),27H,'$'
NEW_LINE	DB		0DH,0AH,'$'
OPERATOR	DB		' = ','$'
			DB		' > ','$'
			DB		' < ','$'
DATA1		ENDS

CODE1		SEGMENT	PARA
			ASSUME	CS:CODE1, DS:DATA1, SS:STACK1

MAIN		PROC	FAR
			MOV		AX,		STACK1
			MOV		SS,		AX
			MOV		SP,		STACK_BOTTOM
			MOV		AX,		DATA1
			MOV		DS,		AX

			MOV		CX,		STR_LEN
			MOV		DI,		OFFSET STR1+1
INPUT1:		MOV		AH,		1
			INT		21H
			MOV		[DI],	AL
			INC		DI
			LOOP	INPUT1
			MOV		DX,		OFFSET NEW_LINE
			MOV		AH,		9
			INT		21H

			MOV		CX,		STR_LEN
			MOV		DI,		OFFSET STR2+1
INPUT2:		MOV		AH,		1
			INT		21H
			MOV		[DI],	AL
			INC		DI
			LOOP	INPUT2
			MOV		DX,		OFFSET NEW_LINE
			MOV		AH,		9
			INT		21H

			MOV		DX,		OFFSET STR1
			MOV		AH,		9
			INT		21H
			CALL	STRCMP
			MOV		DX,		OFFSET STR2
			MOV		AH,	9
			INT		21H

			MOV		AX,		4C00H
			INT		21H
MAIN		ENDP

STRCMP		PROC
			PUSH	ES
			PUSH	DS
			POP		ES

			MOV		SI,		OFFSET STR1
			MOV		DI,		OFFSET STR2
			MOV		CX,		STR_LEN
			CLD
			REPZ	CMPSB
			JA		ABOVE
			JB		BELOW

			MOV		DX,		OFFSET OPERATOR
			JMP		PRINTOP
ABOVE:		MOV		DX,		OFFSET OPERATOR+4
			JMP		PRINTOP
BELOW:		MOV		DX,		OFFSET OPERATOR+8
PRINTOP:	MOV		AH,		9
			INT		21H	

			POP		ES
			RET
STRCMP		ENDP

CODE1		ENDS
			END		MAIN